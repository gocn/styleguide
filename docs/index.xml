<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs on Google Style Guides</title><link>https://gocn.github.io/styleguide/docs/</link><description>Recent content in Docs on Google Style Guides</description><generator>Hugo -- gohugo.io</generator><language>zh</language><atom:link href="https://gocn.github.io/styleguide/docs/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://gocn.github.io/styleguide/docs/01-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gocn.github.io/styleguide/docs/01-overview/</guid><description>概览 # 原文：https://google.github.io/styleguide/go
概述 | 风格指南 | 风格决策 | 最佳实践
关于 # 本系列的 Go 风格指南和相关文档整理了当前，最佳的一个编写易读和惯用方式的 Go 写法。 遵守风格指南并不是绝对的，这份文件也永远不会详尽无遗。我们的目的是尽量减少编写可读 Go 代码的猜测，以便该语言的新手可以避免常见的错误。此风格指南也用于统一 Google 内 Go 代码 review 者的风格指南。
文档 链接 主要受众 视为标准(Normative) 视为规范(Canonical) 风格指南 https://gocn.github.io/styleguide/docs/02-guide/ 所有人 Yes Yes 风格决策 https://gocn.github.io/styleguide/docs/03-decisions/ 可读性导师 Yes No 最佳实践 https://gocn.github.io/styleguide/docs/04-best-practices/ 任何有兴趣的人 No No 文档说明 # 风格指南(Style Guide) (https://gocn.github.io/styleguide/docs/02-guide/) 概述了 Google Go 风格的基础。本文档为定义名词性质的文件，用作风格决策和最佳实践中建议的基础。
风格决策(Style Decisions) (https://gocn.github.io/styleguide/docs/03-decisions/) 是一份更详细的文档，它总结了特定场景下风格的决策理由，并在适当的时候讨论了决策背后的原因。
这些决定可能偶尔会根据新数据、新语言特性、新代码库或新出现的模式而改变，但不期望 Google 的 Go 程序员能及时了解本文档的更新。
最佳实践(Best Practices) (https://gocn.github.io/styleguide/docs/04-best-practices/) 描述了一些随时间演变的模式，这些模式可以解决通用问题，可读性强，并且对代码可维护的需要有很好的健壮性。
这些最佳实践并不规范，但鼓励 Google 的 Go 程序员尽可能使用它们，以保持代码库的统一和一致。</description></item><item><title/><link>https://gocn.github.io/styleguide/docs/02-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gocn.github.io/styleguide/docs/02-guide/</guid><description>Go 风格指南 # 原文：https://google.github.io/styleguide/go
概述 | 风格指南 | 风格决策 | 最佳实践
风格原则 # 以下几条总体原则总结了如何编写可读的 Go 代码。以下为具有可读性的代码特征，按重要性排序：
清晰：代码的目的和设计原理对读者来说是清楚的。 简约：代码以最简单的方式来完成它的目的。 简洁：代码具有很高的信噪比，即写出来的代码是有意义的，非可有可无的。 可维护性：代码可以很容易地被维护。 一致：代码与更广泛的 Google 代码库一致。 清晰 # 可读性的核心目标是写出对读者来说很清晰的代码。
清晰性主要是通过有效的命名、有用的注释和有效的代码组织来实现的。
清晰性要从读者的角度来看，而不是从代码的作者的角度来看，代码的易读性比易写性更重要。代码的清晰性有两个不同的方面：
该代码实际上在做什么？ 为什么代码会这么做？ 该代码实际上在做什么 # Go 被设计得应该是可以比较直接地看到代码在做什么。在不确定的情况下或者读者可能需要先验知识才能理解代码的情况下，我们值得投入时间以使代码的意图对未来的读者更加明确。例如，它可能有助于：
使用更具描述性的变量名称 添加额外的评论 使用空白与注释来划分代码 将代码重构为独立的函数/方法，使其更加模块化 这里没有一个放之四海而皆准的方法，但在开发 Go 代码时，优先考虑清晰性是很重要的。
为什么代码会这么做 # 代码的逻辑通常由变量、函数、方法或包的名称充分传达。如果不是这样，添加注释是很重要的。当代码中包含读者可能不熟悉的细节时，“为什么？”就显得尤为重要，例如：
编程语言中的细微差别，例如，一个闭包将捕获一个循环变量，但闭包在许多行之外 业务逻辑的细微差别，例如，需要区分实际用户和虚假用户的访问控制检查 一个 API 可能需要小心翼翼才能正确使用。例如，由于性能原因，一段代码可能错综复杂，难以理解，或者一连串复杂的数学运算可能以一种意想不到的方式使用类型转换。在这些以及更多的情况下，附带的注释和文档对这些方面进行解释是很重要的，这样未来的维护者就不会犯错，读者也可以理解代码而不需要进行逆向工程。
同样重要的是，我们要意识到，一些基于清晰性考虑的尝试（如添加额外的注释），实际上会通过增加杂乱无章的内容、重述代码已经说过的内容、与代码相矛盾或增加维护负担来保持注释的最新性，以此来掩盖代码的目的。让代码自己说话（例如，通过代码中的名称本身进行描述），而不是添加多余的注释。通常情况下，注释最好是解释为什么要做某事，而不是解释代码在做什么。
Google 的代码库基本上是统一和一致的。通常情况下，那些比较突兀的代码（例如，应用一个不熟悉的模式）是基于充分的理由，通常是为了性能。保持这种特性很重要，可以让读者在阅读一段新的代码时清楚地知道他们应该把注意力放在哪里。
标准库中包含了许多这一原则发挥作用的例子。例如：
在 package sort 中的维护者注释 好的在同一包中可运行的例子，这对用户（他们会查看 godoc）和维护者（他们作为测试的一部分运行）都有利 strings.Cut 只有四行代码，但它们提高了 callsites 的清晰性和正确性 简约 # 你的 Go 代码对于使用、阅读和维护它的人来说应该是简单的。
Go 代码应该以最简单的方式编写，以实现其行为和性能方面的目标。在 Google Go 代码库中，简单的代码：</description></item><item><title/><link>https://gocn.github.io/styleguide/docs/03-decisions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gocn.github.io/styleguide/docs/03-decisions/</guid><description>Go 风格决策 # 原文：https://google.github.io/styleguide/go
概述 | 风格指南 | 风格决策 | 最佳实践
注意： 本文是 Google Go 风格 系列文档的一部分。本文档是 规范性(normative) 但不是强制规范(canonical)，并且从属于Google 风格指南。请参阅概述获取更多详细信息。
关于 # 本文包含旨在统一和为 Go 可读性导师给出的建议提供标准指导、解释和示例的风格决策。
本文档并不详尽，且会随着时间的推移而增加。如果风格指南 与此处给出的建议相矛盾，风格指南优先，并且本文档应相应更新。
参见 关于 获取 Go 风格的全套文档。
以下部分已从样式决策移至指南的一部分：
混合大写字母MixedCaps: 参见 https://gocn.github.io/styleguide/docs/02-guide/#大小写混合 格式化Formatting: 参见 https://gocn.github.io/styleguide/docs/02-guide/#格式化 行长度Line Length: 参见 https://gocn.github.io/styleguide/docs/02-guide/#行长度 命名Naming # 有关命名的总体指导，请参阅核心风格指南 中的命名部分，以下部分对命名中的特定区域提供进一步的说明。
下划线Underscores # Go 中的命名通常不应包含下划线。这个原则有三个例外：
仅由生成代码导入的包名称可能包含下划线。有关如何选择多词包名称的更多详细信息，请参阅包名称。 *_test.go 文件中的测试、基准和示例函数名称可能包含下划线。 与操作系统或 cgo 互操作的低级库可能会重用标识符，如 syscall 中所做的那样。在大多数代码库中，这预计是非常罕见的。 包名称Package names # Go 包名称应该简短并且只包含小写字母。由多个单词组成的包名称应全部小写。例如，包 tabwriter 不应该命名为 tabWriter、TabWriter 或 tab_writer。</description></item><item><title/><link>https://gocn.github.io/styleguide/docs/04-best-practices/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gocn.github.io/styleguide/docs/04-best-practices/</guid><description>Go 编程风格指南 - 最佳实践 # 原文：https://google.github.io/styleguide/go
概述 | 风格指南 | 风格决策 | 最佳实践
注意： 本文是 Google Go 风格 系列文档的一部分。本文档是 规范性(normative) 但不是强制规范(canonical)，并且从属于Google 风格指南。请参阅概述获取更多详细信息。
关于 # 本文件记录了关于如何更好地应用 Go 风格指南的指导意见。该指导旨在解决经常出现的通用问题，但不一定适用于所有情况。在可能的情况下，我们讨论了多种替代方法，以及决定何时该用和何时不该用这些方法的考虑因素。
查看概述来获取完整的风格指导文档
命名 # 函数和方法名称 # 避免重复 # 在为一个函数或方法选择名称时，要考虑该名称将被阅读的环境。请考虑以下建议，以避免在调用地点出现过多的重复:
以下内容一般可以从函数和方法名称中省略。
输入和输出的类型（当没有冲突的时候） 方法的接收器的类型 一个输入或输出是否是一个指针 对于函数，不要重复软件包的名称。
// Bad: package yamlconfig func ParseYAMLConfig(input string) (*Config, error) // Good: package yamlconfig func Parse(input string) (*Config, error) 对于方法不要重复方法接收器的名称。
// Bad: func (c *Config) WriteConfigTo(w io.Writer) (int64, error) // Good: func (c *Config) WriteTo(w io.</description></item></channel></rss>